package icrash.operations.environment.actAdministrator.oeDeletePolice {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.calendar

import icrash.environment

import icrash.concepts.primarytypes.datatypes
import icrash.concepts.primarytypes.classes

Operation Model {

operation: actAdministrator.outactAdministrator.oeDeletePolice(AdtPoliceID:dtPoliceID):ptBoolean
{
preP{
  let TheSystem: ctState in
  let TheActor:actAdministrator in
  
  self.rnActor.rnSystem = TheSystem
  and self.rnActor = TheActor
  
/* PreP01 */
  and TheSystem.vpStarted = true
/* PreP02 */
  and TheActor.rnctAuthenticated.vpIsLogged = true
}
preF{
  let TheSystem: ctState in
  let TheActor:actAdministrator in
   
  self.rnActor.rnSystem = TheSystem
  and self.rnActor = TheActor
/* PreF01 */
  TheSystem.rnctPolice->select(id.eq(AdtPoliceID))
  = ColctPolices
  and ColctPolices->size().eq(1)
}
postF{
  let TheSystem: ctState in
  let TheActor:actAdministrator in
  let ThectPolice:ctPolice in
  self.rnActor.rnSystem = TheSystem
  and self.rnActor = TheActor
/* PostF01 */
  TheSystem.rnctPolice->select(id.eq(AdtPoliceID))
  = ThectPolice
  and ThectPolice.rnactPolice->forAll(msrIsKilled)
  and ThectPolice.msrIsKilled
 
  /* PostF02 */
  and TheActor.rnInterfaceIN^iePoliceDeleted()

 /* Post Protocol:*/
/* PostP01 */
 and true
 }
 postP{true}
 
 prolog{"src/Operations/Environment/OUT/outactAdministrator-oeDeletePolice.pl"}
 }
          }
        }